# telegraph_helper.py

import asyncio
import os
import logging
import requests
from natsort import natsorted
from os import path as ospath
from aiofiles.os import listdir
from telegraph import Telegraph
from telegraph.exceptions import RetryAfterError
from secrets import token_hex
import fitz  # PyMuPDF
from datetime import datetime

# Setup basic logging
logging.basicConfig(level=logging.INFO)
LOGGER = logging.getLogger("Telegraph")


class TelegraphHelper:
    def __init__(self, domain='graph.org'):
        self.telegraph = Telegraph(domain=domain)
        self.short_name = token_hex(4)
        self.access_token = None
        self.author_name = 'Arctix'
        self.author_url = 'https://t.me/arctixinc'

    async def create_account(self):
        LOGGER.info("Creating Telegraph Account (in thread)")
        result = await asyncio.to_thread(
            self.telegraph.create_account,
            short_name=self.short_name,
            author_name=self.author_name,
            author_url=self.author_url
        )
        self.access_token = result.get("access_token")
        if self.access_token:
            self.telegraph = Telegraph(domain="graph.org", access_token=self.access_token)
            LOGGER.info(f"Telegraph Account Generated : {self.short_name} (access_token set)")
        else:
            LOGGER.warning("No access_token received from Telegraph API")

    async def create_page(self, title, content):
        try:
            page = await asyncio.to_thread(
                self.telegraph.create_page,
                title=title,
                author_name=self.author_name,
                author_url=self.author_url,
                html_content=content
            )
            return page
        except RetryAfterError as st:
            LOGGER.warning(f'Telegraph Flood control exceeded. Sleeping {st.retry_after} seconds.')
            await asyncio.sleep(st.retry_after)
            return await self.create_page(title, content)

    def _generate_html_header(self, title):
        """Generate a stylish HTML header using allowed tags"""
        current_date = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        return f"""
        <h3 style="
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 20px;
            border-radius: 10px;
            margin-bottom: 20px;
            text-align: center;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        ">{title}</h3>
        <p style="
            text-align: center; 
            margin: -15px 0 20px 0;
            color: #888;
            font-size: 14px;
        ">
            Generated by {self.author_name} • {current_date}
        </p>
        """

    def _generate_image_container(self, image_url, caption=None):
        """Generate styled image container using allowed tags"""
        caption_html = f'<p style="text-align: center; font-size: 12px; color: #666; margin-top: 5px;">{caption}</p>' if caption else ''
        
        return f"""
        <figure style="
            background: white;
            padding: 15px;
            border-radius: 8px;
            margin: 15px 0;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
            text-align: center;
        ">
            <img 
                src="{image_url}" 
                style="
                    max-width: 100%;
                    height: auto;
                    border-radius: 6px;
                    border: 1px solid #e0e0e0;
                "
                onerror="this.style.display='none'"
            >
            {caption_html}
        </figure>
        """

    def _generate_footer(self):
        """Generate footer with credits using allowed tags"""
        return f"""
        <hr style="margin: 30px 0 15px 0; border: none; border-top: 2px solid #f0f0f0;">
        <p style="text-align: center; color: #888; font-size: 12px;">
            Generated by <a href="{self.author_url}" style="color: #667eea; text-decoration: none;">{self.author_name}</a>
        </p>
        <p style="text-align: center; color: #888; font-size: 12px;">
            © {datetime.now().year} • All rights reserved
        </p>
        """

    async def safe_upload(self, path, retries=3, delay=2):
        """Upload a file to envs.sh with retries."""
        for attempt in range(retries):
            try:
                with open(path, "rb") as f:
                    files = {"file": f}
                    response = requests.post("https://envs.sh", files=files, timeout=15)
                if response.ok:
                    url = response.text.strip()
                    LOGGER.info("File uploaded to envs.sh: %s", url)
                    return url
                else:
                    LOGGER.error("envs.sh upload failed: %s", response.text)
            except Exception as e:
                LOGGER.error(f"Attempt {attempt + 1}: Failed to upload {path}: {e}")
                if attempt < retries - 1:
                    await asyncio.sleep(delay)
        return None

    async def upload_screenshots_from_dir(self, thumbs_dir):
        """Upload all images from a directory with enhanced styling."""
        if not ospath.isdir(thumbs_dir):
            LOGGER.error("Provided directory does not exist.")
            return None

        # Start building HTML with header
        th_html = self._generate_html_header("Screenshots Report")

        thumbs = await listdir(thumbs_dir)
        total_images = len(thumbs)
        uploaded_count = 0

        for i, thumb in enumerate(natsorted(thumbs)):
            image_path = ospath.join(thumbs_dir, thumb)
            uploaded_path = await self.safe_upload(image_path)
            if uploaded_path:
                caption = f"Image {i + 1} of {total_images}"
                th_html += self._generate_image_container(uploaded_path, caption)
                uploaded_count += 1
                await asyncio.sleep(1)
            else:
                LOGGER.error(f"Failed to upload {thumb} after retries.")

        # Add summary
        th_html += f"""
        <blockquote style="
            background: #e3f2fd;
            padding: 15px;
            border-radius: 8px;
            margin: 20px 0;
            text-align: center;
            border-left: 4px solid #1976d2;
        ">
            <h4 style="margin: 0; color: #1976d2;">Summary</h4>
            <p style="margin: 5px 0; color: #424242;">
                Successfully uploaded {uploaded_count} of {total_images} images
            </p>
        </blockquote>
        """
        
        # Add footer
        th_html += self._generate_footer()

        page = await self.create_page(title="Screenshots Report", content=th_html)
        return f"https://graph.org/{page['path']}"

    async def upload_from_pdf(self, pdf_url):
        """Download a PDF, extract pages as images using PyMuPDF, upload them, and create a Telegraph page."""
        LOGGER.info(f"Downloading PDF from {pdf_url}")
        response = requests.get(pdf_url)
        pdf_bytes = response.content

        # Extract pages using PyMuPDF
        LOGGER.info("Extracting images from PDF with PyMuPDF...")
        doc = fitz.open(stream=pdf_bytes, filetype="pdf")
        image_paths = []
        
        for i, page in enumerate(doc):
            pix = page.get_pixmap()
            img_path = f"page_{i+1}.jpg"
            pix.save(img_path)
            image_paths.append(img_path)

        # Build Telegraph HTML with header
        th_html = self._generate_html_header("PDF Document Report")

        total_pages = len(image_paths)
        uploaded_count = 0

        for i, img_path in enumerate(image_paths):
            uploaded_path = await self.safe_upload(img_path)
            if uploaded_path:
                caption = f"Page {i + 1} of {total_pages}"
                th_html += self._generate_image_container(uploaded_path, caption)
                uploaded_count += 1
                await asyncio.sleep(1)
            else:
                LOGGER.error(f"Failed to upload {img_path} after retries.")
            
            # Clean up temporary file
            try:
                os.remove(img_path)
            except:
                pass

        # Add summary
        th_html += f"""
        <blockquote style="
            background: #e8f5e8;
            padding: 15px;
            border-radius: 8px;
            margin: 20px 0;
            text-align: center;
            border-left: 4px solid #2e7d32;
        ">
            <h4 style="margin: 0; color: #2e7d32;">Document Summary</h4>
            <p style="margin: 5px 0; color: #424242;">
                Processed {uploaded_count} of {total_pages} pages
            </p>
            <p style="margin: 0; color: #666; font-size: 12px;">
                Original PDF: <a href="{pdf_url}" style="color: #667eea;">View Source</a>
            </p>
        </blockquote>
        """
        
        # Add footer
        th_html += self._generate_footer()

        page = await self.create_page(title="PDF Document Report", content=th_html)
        return f"https://graph.org/{page['path']}"
